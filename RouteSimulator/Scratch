            guard let panningNode = self.panningNode else { return }
            var dirtyRects = [panningNode.frame]
            let translation = pan.translation(in: nodeView)
            panningNode.translate(translation: translation)
            dirtyRects.append(panningNode.frame)

            for (arrow, node) in arrowMap {
                if !(node === panningNode || node.next! === panningNode) { continue }
                dirtyRects.append(arrow.frame)
                let pts = calculateCoordinates(ofArrowFrom: node)
                arrow.update(start: pts.start, end: pts.end)
                dirtyRects.append(arrow.frame)
            }

            nodeView.setNeedsDisplay(CGRect(union: dirtyRects))
            pan.setTranslation(.zero, in: nodeView)
